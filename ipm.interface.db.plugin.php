<?php
/** 
 * IPM Database Class 
 * 
 * <p>Database Class Subsystem</p>
 * 
 * @author    Aaron Snyder <aaron.snyder@hki.com>
 * @date      2013-01-24
 * @version   1.8.x
 * @revision  460921
 * @package   IPM\Core\System\Database
 */
/**
 * IPM Database Plugin Interface
 * 
 * @package   IPM\Core\System\Database
 */
interface iIPM_db_plugin {
    public function setDefaults($defaults);
    public function getDefaults($varname = "");
    public function open($user,$pass,$host);
    public function setdb($db);
    public function setvar($variable,$value);
    public function connected();
    public function close();
    public function query($query);
    public function results($type = "array");
    public function result($row,$field = 0);
    public function reset($pointer = 0);
    public function insert($params,$returnQuery = false);
    public function update($params,$returnQuery = false);
    public function select($params,$returnQuery = false);
    public function delete($params,$returnQuery = false);
    public function create($params,$returnQuery = false);
}

/**
 * IPM Database Plugin Abtraction
 * 
 * @package   IPM\Core\System\Database
 */
abstract class aIPM_db_plugin {
    /**
     * Database connection identifier
     * @type resource 
     */
    public $conn;
    
    /**
     * True if a database has been selected
     * @var bool 
     */
    protected $dbsel = false;
    
    /**
     * The currently selected database name
     * @var string 
     */
    public $database;
    
    /**
     * Database Host Name
     * @var string 
     */
    protected $server;
    
    /**
     * Database user name
     * @var string 
     */
    protected $username;
    
    /**
     * Database password
     * @var string 
     */
    protected $password;
    
    /**
     * Results from the last SQL statement
     * @var resource 
     */
    protected $sqlresult;		//results from last sql statement
    
    /**
     * Table defaults for creating new database tables
     * @var object
     */
    protected $defaults;

    /**
     * True if the database PHP extension is loaded
     * @var bool 
     */
    protected $extensionLoaded = false;
    
    /**
     * Plugin Identification
     * @var string 
     */
    protected $pluginid = "mysql";
    
    /**
     * @var Integer
     * Error number returned from latest query
     */
    public $errno = 0;
    
    /**
     * Error string returned form latest query
     * @var String 
     */
    public $error = "";
    
    /**
     * The number of rows affected by the last update query
     * @var Integer 
     */
    public $affected_rows = 0;
    
    /**
     * The row count of the last select statement
     * @var integer
     */
    public $num_rows = 0;
    
    /**
     * The auto incremeted ID generated by the last insert query
     * @var Integer 
     */
    public $insert_id = 0;
    
    /**
     * The last query executed
     * @var object 
     */
    public $lastQuery;
    
    /**
     * Prefix types or roles for creating database tables
     * @var array 
     */
    protected $prefix = Array(
        "system" => "system",
        "content" => "content",
        "modules" => "modules",
        "default" => "content"
    );
    
    /**
     * Array to hold the query queue
     * @var Array 
     */
    protected $queue = Array();
    
    /**
     * List of field types for creating database tables.  This is used to make 
     * sure that only valid field types are allowed to be created
     * @type array 
     */
    protected $fieldTypes = Array(
        "NUMERIC" => Array("TINYINT","SMALLINT","MEDIUMINT","INT","BIGINT","DECIMAL","FLOAT","DOUBLE","REAL","BIT","BOOLEAN","SERIAL"),
        "DATETIME" => Array("DATE","DATETIME","TIMESTAMP","TIME","YEAR"),
        "STRING" => Array("CHAR","VARCHAR","TINYTEXT","TEXT","MEDIUMTEXT","LONGTEXT","BINARY","VARBINARY","TINYBLOB","MEDIUMBLOB","BLOB","LONGBLOB","ENUM","SET"),
        "SPATIAL" => Array("GEOMETRY","POINT","LINESTRING","POLYGON","MULTIPOINT","MULTILINESTRING","MULTIPOLYGON","GEOMETRYCOLLECTION")
    );

    /**
     * Constructor - sets default connection if it exists and initializes defaults
     * @constructor
     */
    public function __construct($conn = false) {
        $this->defaults = new StdClass();
        $this->defaults->charset = "latin1";
        $this->defaults->collate = "latin1_general_ci";
        $this->defaults->engine = "MyISAM";
        $this->defaults->null = false;
        $this->defaults->prefix = json_decode('{system":"ipmsys","default":"ipmmod"}',true);
        if ($conn) $this->conn = $conn;
    }
    
    /**
     * Returns the plugin identifier
     * @return string Plugin ID
     */
    public function getType() { return $this->pluginid; }
    
    /**
     * Returns the name of the current active database
     * @return String Database name, false if a database is not selected
     */
    public function getdb() {
        if ($this->dbsel) return $this->database;
        return false;
    }
    
}

?>